C51 COMPILER V9.53.0.0   UART2                                                             01/14/2025 13:19:18 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN ..\OBJ\uart2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE ..\HANDWARE\UART2\uart2.c LARGE OMF2 OPTIMIZE(3,SIZE) B
                    -ROWSE INCDIR(..\USER;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\uart2.lst) TABS(2) OBJECT(..\OBJ\u
                    -art2.obj)

line level    source

   1          #include "uart2.h"
   2          
   3          
   4          
   5          volatile u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   6          volatile u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   7          volatile u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   8          volatile u8 current_dev = 0;                    // –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞
   9          volatile u32 rcv_timer=0;
  10          xdata volatile  u16 current_device=0;          
  11          
  12          
  13          #if(UART2_INT_EN)
  14          xdata u16 uart2_rx_sta;//bit15Used to mark whether a complete data packet has been received, bit[14:0] is 
             -used to store the length of the current data packetxdata u8
  15          xdata u8  uart2_buf[UART2_PACKET_MAX_LEN];
  16          xdata u8  uart2_step;
  17          xdata u8  rcv_complete=0;  // –ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  18          idata u16 data_len=0;
  19          //Serial port 2 interrupt service routine
  20          
  21          void uart2_isr() interrupt 4 {
  22   1          u8 res;
  23   1        
  24   1          if (RI0) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  25   2              RI0 = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞
  26   2                
  27   2               rcv_timer=sys_tick;
  28   2               res = SBUF0;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  29   2      
  30   2              // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω
             -–Ω—ã–µ
  31   2              if (uart2_rx_sta & UART2_PACKET_OK) {
  32   3                  return;
  33   3              }
  34   2      
  35   2              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
  36   2              if (uart2_rx_sta < UART2_PACKET_MAX_LEN) {
  37   3                  uart2_buf[uart2_rx_sta] = res;
  38   3                  uart2_rx_sta++;
  39   3                
  40   3                
  41   3                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç (opCode) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
  42   3                  if (uart2_rx_sta == 2) {
  43   4                      if (uart2_buf[1] & 0x80) { // –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ 
             -–∫–æ–¥ –æ—à–∏–±–∫–∏
  44   5                          data_len = 5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞ –æ—à–∏–±–∫–∏
  45   5                      }
  46   4                  }
  47   3              } else {
  48   3                  uart2_rx_sta = 0;  // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  49   3                  return;
  50   3              }
C51 COMPILER V9.53.0.0   UART2                                                             01/14/2025 13:19:18 PAGE 2   

  51   2      
  52   2              // –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
  53   2              if (uart2_step<data_len) {  
  54   3                  uart2_step++;
  55   3              } 
  56   2              
  57   2            if(uart2_step==data_len)  {  
  58   3                  uart2_rx_sta |= UART2_PACKET_OK;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞–∫–µ—Ç–∞
  59   3                uart2_step =0;
  60   3              }
  61   2          }
  62   1      }
  63          #endif
  64          
  65          
  66          //Serial port 2 initialization
  67          void uart2_init(u32 baud)
  68          {
  69   1        MUX_SEL |= 0x40;//Setting bit6 to 1 means to export the uart2 interface to P0.4 and P0.5
  70   1        P0MDOUT &= 0xCF;
  71   1        P0MDOUT |= 0x10;//Set the corresponding IO port output and input
  72   1        ADCON = 0x80;//Select SREL0H:L as baud rate generator
  73   1        SCON0 = 0x50;//Accept enable and mode settings
  74   1        PCON &= 0x7F;//SMOD=0
  75   1        //Baud rate setting, the formula is:
  76   1        //SMOD=0  SREL0H:L=1024-main frequency/(64*baud rate),SMOD=1   SREL0H:L=1024-main frequency/(32*baud rate)
  77   1        baud = 1024-(u16)(3225600.0f/baud);
  78   1        SREL0H = (baud>>8)&0xff;  
  79   1        SREL0L = baud&0xff;
  80   1        
  81   1        #if(UART2_INT_EN)
  82   1          ES0 = 1;//Interrupt enable
  83   1          EA = 1;
  84   1          //xdata variables must be initialized in functions
  85   1          uart2_rx_sta = 0;
  86   1          uart2_step = 0;
  87   1        #else
                  ES0 = 0;
                #endif
  90   1      
  91   1      }
  92          
  93          //Send a byte
  94          void u2_send_byte(u8 byte)
  95          {
  96   1        ES0 = 0;//Close the serial port 2 interrupt first
  97   1        SBUF0 = byte;
  98   1        while(!TI0);
  99   1        TI0 = 0;
 100   1        #if(UART2_INT_EN)
 101   1          ES0 = 1;//Re-open interrupt
 102   1        #endif
 103   1      }
 104          
 105          
 106          
 107          //Send data
 108          void u2_send_bytes(u8 *bytes,u16 len)
 109          {
 110   1        u16 i;
 111   1        
 112   1        ES0 = 0;//Close the serial port 2 interrupt first
C51 COMPILER V9.53.0.0   UART2                                                             01/14/2025 13:19:18 PAGE 3   

 113   1        for(i=0;i<len;i++)
 114   1        {
 115   2          SBUF0 = bytes[i];
 116   2          while(!TI0);
 117   2          TI0 = 0;
 118   2        }
 119   1        #if(UART2_INT_EN)
 120   1          ES0 = 1;//Re-open interrupt
 121   1        #endif
 122   1      }
 123          
 124          
 125          //Implement printf function with uart2 serial port
 126          char putchar(char c)
 127          {
 128   1        u2_send_byte(c);
 129   1        
 130   1        return c;
 131   1      }
 132          
 133          
 134          
 135          
 136          u16 calculate_crc(unsigned char *buffer, unsigned char length) {
 137   1          unsigned int temp, temp2, flag;
 138   1          unsigned int i;               // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `i`
 139   1          unsigned char j;              // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `j`
 140   1      
 141   1          temp = 0xFFFF;
 142   1      
 143   1          for (i = 0; i < length; i++) {
 144   2              temp = temp ^ buffer[i];
 145   2              for (j = 0; j < 8; j++) {
 146   3                  flag = temp & 0x0001;
 147   3                  temp >>= 1;
 148   3                  if (flag)
 149   3                      temp ^= 0xA001;
 150   3              }
 151   2          }
 152   1      
 153   1          // Reverse byte order.
 154   1          temp2 = temp >> 8;
 155   1          temp = (temp << 8) | temp2;
 156   1          temp &= 0xFFFF;
 157   1      
 158   1          return temp;
 159   1      }
 160          
 161          
 162            u8 parseModbusPacket(u8 *buffer, u16 length, ModbusPacket *parsedPacket) {
 163   1          u16 receivedCRC;
 164   1          u16 calculatedCRC; 
 165   1          unsigned int m;  
 166   1          unsigned int l;
 167   1          u16 receive_adr;
 168   1          u16 receive_cmd;
 169   1          receive_adr=  buffer[0];  
 170   1          receive_cmd=  buffer[1];  
 171   1          sys_write_vp(0x2065, &receive_adr, 1);
*** WARNING C182 IN LINE 171 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
 172   1          sys_write_vp(0x2067, &receive_cmd, 1);
*** WARNING C182 IN LINE 172 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
C51 COMPILER V9.53.0.0   UART2                                                             01/14/2025 13:19:18 PAGE 4   

 173   1          
 174   1          if (length < 4) {
 175   2              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞: –∞–¥—Ä–µ—Å (1 –±–∞–π—Ç) + —Ñ—É–Ω–∫—Ü–∏—è (1 –±–
             -∞–π—Ç) + CRC (2 –±–∞–π—Ç–∞)
 176   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 177   2              return 99 ;
 178   2          }
 179   1      
 180   1          // –ò–∑–≤–ª–µ–∫–∞–µ–º CRC –∏–∑ –∫–æ–Ω—Ü–∞ –ø–∞–∫–µ—Ç–∞
 181   1          
 182   1          receivedCRC = buffer[length - 1] | (buffer[length - 2] << 8);
 183   1      
 184   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 185   1          calculatedCRC = calculate_crc(buffer, length - 2);
 186   1          if (receivedCRC != calculatedCRC) {
 187   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 188   2              return 98 ; // –û—à–∏–±–∫–∞ CRC
 189   2          }
 190   1      
 191   1          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞
 192   1          parsedPacket->rcv_address = buffer[0];
 193   1          parsedPacket->rcv_functionCode = buffer[1];
 194   1          parsedPacket->rcv_dataLength = buffer[2]; 
 195   1          for (m = 0; m < parsedPacket->rcv_dataLength; m++) {
 196   2              parsedPacket->rcv_data[m] = buffer[3 + m];
 197   2          }
 198   1           for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 199   1           return 1;
 200   1         
 201   1      }
 202          
 203          
 204          void modbus_requests(ModbusRequest *requests) {
 205   1          u8 packet[8];
 206   1          u16 crc;
 207   1      
 208   1          // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å Modbus
 209   1          packet[0] = requests->address;                      // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 210   1          packet[1] = requests->command;                                  // –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ (—á—Ç–µ–Ω–∏–µ
             - —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
 211   1          packet[2] = (requests->start_register >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä
             -–µ–≥–∏—Å—Ç—Ä–∞
 212   1          packet[3] = requests->start_register & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä
             -–µ–≥–∏—Å—Ç—Ä–∞
 213   1          packet[4] = (requests->num_registers >> 8) & 0xFF;  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä
             -–µ–≥–∏—Å—Ç—Ä–æ–≤
 214   1          packet[5] = requests->num_registers & 0xFF;         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä
             -–µ–≥–∏—Å—Ç—Ä–æ–≤
 215   1      
 216   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC
 217   1          crc = calculate_crc(packet, 6);
 218   1          packet[7] = crc & 0xFF;                            // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç CRC
 219   1          packet[6] = (crc >> 8) & 0xFF;                     // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç CRC
 220   1          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ UART
 221   1          u2_send_bytes(packet, 8);
 222   1      }
 223          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1465    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   UART2                                                             01/14/2025 13:19:18 PAGE 5   

   XDATA SIZE       =     84      60
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
