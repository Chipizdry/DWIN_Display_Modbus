C51 COMPILER V9.53.0.0   UART2                                                             01/17/2025 16:57:37 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN ..\OBJ\uart2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE ..\HANDWARE\UART2\uart2.c LARGE OMF2 OPTIMIZE(3,SIZE) B
                    -ROWSE INCDIR(..\USER;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\uart2.lst) TABS(2) OBJECT(..\OBJ\u
                    -art2.obj)

line level    source

   1          #include "uart2.h"
   2          
   3          
   4          
   5          volatile u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   6          volatile u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   7          volatile u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   8          volatile u8 current_dev = 0;                    // –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞
   9          volatile u32 rcv_timer=0;
  10          xdata volatile  u16 current_device=0;          
  11          
  12          
  13          #if(UART2_INT_EN)
  14          xdata u16 uart2_rx_sta;//bit15Used to mark whether a complete data packet has been received, bit[14:0] is 
             -used to store the length of the current data packetxdata u8
  15          xdata u8  uart2_buf[UART2_PACKET_MAX_LEN];
  16          xdata u8  uart2_step;
  17          xdata u8  rcv_complete=0;  // –ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  18          idata u16 data_len=0;
  19          //Serial port 2 interrupt service routine
  20          
  21          void uart2_isr() interrupt 4 {
  22   1          u8 res;
  23   1        
  24   1          if (RI0) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  25   2              RI0 = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞
  26   2                
  27   2               sys_tick=IDLE_TIME;
  28   2               res = SBUF0;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  29   2      
  30   2              // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω
             -–Ω—ã–µ
  31   2              if (uart2_rx_sta & UART2_PACKET_OK) {
  32   3                  return;
  33   3              }
  34   2      
  35   2              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
  36   2              if (uart2_rx_sta < UART2_PACKET_MAX_LEN) {
  37   3                  uart2_buf[uart2_rx_sta] = res;
  38   3                  uart2_rx_sta++;
  39   3                
  40   3                
  41   3                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç (opCode) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
  42   3                  if ((uart2_rx_sta == 2)&&(uart2_buf[1] & 0x80)){
  43   4                    // if (uart2_buf[1] & 0x80) { // –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ
             - –∫–æ–¥ –æ—à–∏–±–∫–∏
  44   4                          data_len = 5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞ –æ—à–∏–±–∫–∏
  45   4                     // }
  46   4                  }
  47   3              } else {
  48   3                  uart2_rx_sta = 0;  // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  49   3                  
  50   3                  return;
C51 COMPILER V9.53.0.0   UART2                                                             01/17/2025 16:57:37 PAGE 2   

  51   3              }
  52   2      
  53   2              // –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
  54   2              if (uart2_step<data_len) {  
  55   3                  uart2_step++;
  56   3              } 
  57   2              
  58   2            if(uart2_step==data_len)  {  
  59   3                  uart2_rx_sta |= UART2_PACKET_OK;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞–∫–µ—Ç–∞
  60   3                uart2_step =0;
  61   3              }
  62   2          }
  63   1      }
  64          #endif
  65          
  66          
  67          //Serial port 2 initialization
  68          void uart2_init(u32 baud)
  69          {
  70   1        MUX_SEL |= 0x40;//Setting bit6 to 1 means to export the uart2 interface to P0.4 and P0.5
  71   1        P0MDOUT &= 0xCF;
  72   1        P0MDOUT |= 0x10;//Set the corresponding IO port output and input
  73   1        ADCON = 0x80;//Select SREL0H:L as baud rate generator
  74   1        SCON0 = 0x50;//Accept enable and mode settings
  75   1        PCON &= 0x7F;//SMOD=0
  76   1        //Baud rate setting, the formula is:
  77   1        //SMOD=0  SREL0H:L=1024-main frequency/(64*baud rate),SMOD=1   SREL0H:L=1024-main frequency/(32*baud rate)
  78   1        baud = 1024-(u16)(3225600.0f/baud);
  79   1        SREL0H = (baud>>8)&0xff;  
  80   1        SREL0L = baud&0xff;
  81   1        
  82   1        #if(UART2_INT_EN)
  83   1          ES0 = 1;//Interrupt enable
  84   1          EA = 1;
  85   1          //xdata variables must be initialized in functions
  86   1          uart2_rx_sta = 0;
  87   1          uart2_step = 0;
  88   1        #else
                  ES0 = 0;
                #endif
  91   1      
  92   1      }
  93          
  94          //Send a byte
  95          void u2_send_byte(u8 byte)
  96          {
  97   1        ES0 = 0;//Close the serial port 2 interrupt first
  98   1        SBUF0 = byte;
  99   1        while(!TI0);
 100   1        TI0 = 0;
 101   1        #if(UART2_INT_EN)
 102   1          ES0 = 1;//Re-open interrupt
 103   1        #endif
 104   1      }
 105          
 106          
 107          
 108          //Send data
 109          void u2_send_bytes(u8 *bytes,u16 len)
 110          {
 111   1        u16 i;
 112   1        
C51 COMPILER V9.53.0.0   UART2                                                             01/17/2025 16:57:37 PAGE 3   

 113   1        ES0 = 0;//Close the serial port 2 interrupt first
 114   1        for(i=0;i<len;i++)
 115   1        {
 116   2          SBUF0 = bytes[i];
 117   2          while(!TI0);
 118   2          TI0 = 0;
 119   2        }
 120   1        #if(UART2_INT_EN)
 121   1          ES0 = 1;//Re-open interrupt
 122   1        #endif
 123   1      }
 124          
 125          
 126          //Implement printf function with uart2 serial port
 127          char putchar(char c)
 128          {
 129   1        u2_send_byte(c);
 130   1        
 131   1        return c;
 132   1      }
 133          
 134          
 135          
 136          
 137          u16 calculate_crc(unsigned char *buffer, unsigned char length) {
 138   1          unsigned int temp, temp2, flag;
 139   1          unsigned int i;               // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `i`
 140   1          unsigned char j;              // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `j`
 141   1      
 142   1          temp = 0xFFFF;
 143   1      
 144   1          for (i = 0; i < length; i++) {
 145   2              temp = temp ^ buffer[i];
 146   2              for (j = 0; j < 8; j++) {
 147   3                  flag = temp & 0x0001;
 148   3                  temp >>= 1;
 149   3                  if (flag)
 150   3                      temp ^= 0xA001;
 151   3              }
 152   2          }
 153   1      
 154   1          // Reverse byte order.
 155   1          temp2 = temp >> 8;
 156   1          temp = (temp << 8) | temp2;
 157   1          temp &= 0xFFFF;
 158   1      
 159   1          return temp;
 160   1      }
 161          
 162          
 163            u8 parseModbusPacket(u8 *buffer, u16 length, ModbusPacket *parsedPacket) {
 164   1          u16 receivedCRC;
 165   1          u16 calculatedCRC; 
 166   1          unsigned int m;  
 167   1          unsigned int l;
 168   1          u16 receive_adr;
 169   1          u16 receive_cmd;
 170   1          receive_adr=  buffer[0];  
 171   1          receive_cmd=  buffer[1];  
 172   1          sys_write_vp(0x2065, &receive_adr, 1);
*** WARNING C182 IN LINE 172 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
 173   1          sys_write_vp(0x2067, &receive_cmd, 1);
C51 COMPILER V9.53.0.0   UART2                                                             01/17/2025 16:57:37 PAGE 4   

*** WARNING C182 IN LINE 173 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
 174   1          
 175   1          if (length < 4) {
 176   2              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞: –∞–¥—Ä–µ—Å (1 –±–∞–π—Ç) + —Ñ—É–Ω–∫—Ü–∏—è (1 –±–
             -∞–π—Ç) + CRC (2 –±–∞–π—Ç–∞)
 177   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 178   2              return 99 ;
 179   2          }
 180   1      
 181   1          // –ò–∑–≤–ª–µ–∫–∞–µ–º CRC –∏–∑ –∫–æ–Ω—Ü–∞ –ø–∞–∫–µ—Ç–∞
 182   1          
 183   1          receivedCRC = buffer[length - 1] | (buffer[length - 2] << 8);
 184   1      
 185   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 186   1          calculatedCRC = calculate_crc(buffer, length - 2);
 187   1          if (receivedCRC != calculatedCRC) {
 188   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 189   2              return 98 ; // –û—à–∏–±–∫–∞ CRC
 190   2          }
 191   1      
 192   1          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞
 193   1          parsedPacket->rcv_address = buffer[0];
 194   1          parsedPacket->rcv_functionCode = buffer[1];
 195   1          
 196   1            if (parsedPacket->rcv_functionCode == 0x03) { // –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 197   2          parsedPacket->rcv_dataLength = buffer[2]; 
 198   2          for (m = 0; m < parsedPacket->rcv_dataLength; m++) {
 199   3              parsedPacket->rcv_data[m] = buffer[3 + m];
 200   3          }
 201   2           for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 202   2           return 1; }  
 203   1            
 204   1           if(parsedPacket->rcv_functionCode == 0x10) { // –ó–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 205   2           
 206   2           
 207   2           return 1; }
 208   1         
 209   1      }
 210          
 211          
 212          void modbus_requests(ModbusRequest *requests,u16 *data_send, u8 data_len) {
 213   1          u8 packet[32];
 214   1          u16 crc;
 215   1          u16 i;
 216   1          u8 len;     // –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞
 217   1          u8 byte_count;
 218   1          // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å Modbus
 219   1          packet[0] = requests->address;                      // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 220   1          packet[1] = requests->command;                      // –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ (—á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—
             -å  —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
 221   1        
 222   1        if (requests->command == 0x03) { // –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 223   2              packet[2] = (requests->start_register >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–
             -æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 224   2              packet[3] = requests->start_register & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–
             -æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 225   2              packet[4] = (requests->num_registers >> 8) & 0xFF;  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–
             -∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 226   2              packet[5] = requests->num_registers & 0xFF;         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–
             -∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 227   2              len = 6; // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 3
 228   2          } 
C51 COMPILER V9.53.0.0   UART2                                                             01/17/2025 16:57:37 PAGE 5   

 229   1          
 230   1          else if (requests->command == 0x10) { // –ó–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 231   2              byte_count = data_len*2;
 232   2      
 233   2              packet[2] = (requests->start_register >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–
             -æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 234   2              packet[3] = requests->start_register & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–
             -æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 235   2              packet[4] = (data_len >> 8) & 0xFF;                 // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–
             -∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 236   2              packet[5] = data_len & 0xFF;                        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–
             -∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 237   2              packet[6] = byte_count & 0xFF;                      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
 238   2      
 239   2              // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–∫–µ—Ç
 240   2              for (i = 0; i < data_len; i++) {
 241   3                  packet[7 + (i * 2)] = (data_send[i] >> 8) & 0xFF;    // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
 242   3                  packet[8 + (i * 2)] = data_send[i] & 0xFF;           // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
 243   3              }
 244   2      
 245   2              len = 7 + byte_count; // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 16
 246   2          }
 247   1      
 248   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC
 249   1          crc = calculate_crc(packet, len);
 250   1          packet[len+1] = crc & 0xFF;                            // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç CRC
 251   1          packet[len] = (crc >> 8) & 0xFF;                     // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç CRC
 252   1           len += 2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞ —Ä–∞–∑–º–µ—Ä CRC
 253   1          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ UART
 254   1          u2_send_bytes(packet, len);
 255   1      }
 256          
 257          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—
             -ã–π –±–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
 258          void setBitInUint16(u16 *reg, u8 bitPos, bool value) {
 259   1          if (bitPos < 16) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–æ–º–µ—Ä –±–∏—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-15
 260   2              if (value) {
 261   3                  *reg |= (1 << bitPos); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç
 262   3              } else {
 263   3                  *reg &= ~(1 << bitPos); // –°–±—Ä–æ—Å–∏—Ç—å –±–∏—Ç
 264   3              }
 265   2          }
 266   1      }
*** WARNING C291 IN LINE 209 OF ..\HANDWARE\UART2\uart2.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1930    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     84      97
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
