C51 COMPILER V9.53.0.0   UART2                                                             01/11/2025 09:38:15 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN ..\OBJ\uart2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE ..\HANDWARE\UART2\uart2.c LARGE OMF2 OPTIMIZE(3,SIZE) B
                    -ROWSE INCDIR(..\USER;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\uart2.lst) TABS(2) OBJECT(..\OBJ\u
                    -art2.obj)

line level    source

   1          #include "uart2.h"
   2          
   3          
   4          
   5          volatile u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   6          volatile u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   7          volatile u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   8          volatile u8 current_dev = 0;                    // –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞
   9          volatile u32 rcv_timer=0;
  10          xdata volatile  u16 current_device=0;          
  11          
  12          
  13          #if(UART2_INT_EN)
  14          xdata u16 uart2_rx_sta;//bit15Used to mark whether a complete data packet has been received, bit[14:0] is 
             -used to store the length of the current data packetxdata u8
  15          xdata u8  uart2_buf[UART2_PACKET_MAX_LEN];
  16          xdata u8  uart2_step;
  17          xdata u8  rcv_complete=0;  // –ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  18          idata u16 data_len=0;
  19          //Serial port 2 interrupt service routine
  20          
  21          void uart2_isr() interrupt 4 {
  22   1          u8 res;
  23   1        
  24   1          if (RI0) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  25   2              RI0 = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞
  26   2               rcv_timer=sys_tick;
  27   2               res = SBUF0;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  28   2      
  29   2              // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω
             -–Ω—ã–µ
  30   2              if (uart2_rx_sta & UART2_PACKET_OK) {
  31   3                  return;
  32   3              }
  33   2      
  34   2              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
  35   2              if (uart2_rx_sta < UART2_PACKET_MAX_LEN) {
  36   3                  uart2_buf[uart2_rx_sta] = res;
  37   3                  uart2_rx_sta++;
  38   3                
  39   3                
  40   3                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç (opCode) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
  41   3                  if (uart2_rx_sta == 2) {
  42   4                      if (uart2_buf[1] & 0x80) { // –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ 
             -–∫–æ–¥ –æ—à–∏–±–∫–∏
  43   5                          data_len = 5; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞ –æ—à–∏–±–∫–∏
  44   5                      }
  45   4                  }
  46   3              } else {
  47   3                  uart2_rx_sta = 0;  // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  48   3                  return;
  49   3              }
  50   2      
C51 COMPILER V9.53.0.0   UART2                                                             01/11/2025 09:38:15 PAGE 2   

  51   2              // –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
  52   2              if (uart2_step<data_len) {  
  53   3                  uart2_step++;
  54   3              } 
  55   2              
  56   2            if(uart2_step==data_len)  {  
  57   3                  uart2_rx_sta |= UART2_PACKET_OK;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞–∫–µ—Ç–∞
  58   3                uart2_step =0;
  59   3              }
  60   2          }
  61   1      }
  62          #endif
  63          
  64          
  65          //Serial port 2 initialization
  66          void uart2_init(u32 baud)
  67          {
  68   1        MUX_SEL |= 0x40;//Setting bit6 to 1 means to export the uart2 interface to P0.4 and P0.5
  69   1        P0MDOUT &= 0xCF;
  70   1        P0MDOUT |= 0x10;//Set the corresponding IO port output and input
  71   1        ADCON = 0x80;//Select SREL0H:L as baud rate generator
  72   1        SCON0 = 0x50;//Accept enable and mode settings
  73   1        PCON &= 0x7F;//SMOD=0
  74   1        //Baud rate setting, the formula is:
  75   1        //SMOD=0  SREL0H:L=1024-main frequency/(64*baud rate),SMOD=1   SREL0H:L=1024-main frequency/(32*baud rate)
  76   1        baud = 1024-(u16)(3225600.0f/baud);
  77   1        SREL0H = (baud>>8)&0xff;  
  78   1        SREL0L = baud&0xff;
  79   1        
  80   1        #if(UART2_INT_EN)
  81   1          ES0 = 1;//Interrupt enable
  82   1          EA = 1;
  83   1          //xdata variables must be initialized in functions
  84   1          uart2_rx_sta = 0;
  85   1          uart2_step = 0;
  86   1        #else
                  ES0 = 0;
                #endif
  89   1      
  90   1      }
  91          
  92          //Send a byte
  93          void u2_send_byte(u8 byte)
  94          {
  95   1        ES0 = 0;//Close the serial port 2 interrupt first
  96   1        SBUF0 = byte;
  97   1        while(!TI0);
  98   1        TI0 = 0;
  99   1        #if(UART2_INT_EN)
 100   1          ES0 = 1;//Re-open interrupt
 101   1        #endif
 102   1      }
 103          
 104          
 105          
 106          //Send data
 107          void u2_send_bytes(u8 *bytes,u16 len)
 108          {
 109   1        u16 i;
 110   1        
 111   1        ES0 = 0;//Close the serial port 2 interrupt first
 112   1        for(i=0;i<len;i++)
C51 COMPILER V9.53.0.0   UART2                                                             01/11/2025 09:38:15 PAGE 3   

 113   1        {
 114   2          SBUF0 = bytes[i];
 115   2          while(!TI0);
 116   2          TI0 = 0;
 117   2        }
 118   1        #if(UART2_INT_EN)
 119   1          ES0 = 1;//Re-open interrupt
 120   1        #endif
 121   1      }
 122          
 123          
 124          //Implement printf function with uart2 serial port
 125          char putchar(char c)
 126          {
 127   1        u2_send_byte(c);
 128   1        
 129   1        return c;
 130   1      }
 131          
 132          
 133          
 134          
 135          u16 calculate_crc(unsigned char *buffer, unsigned char length) {
 136   1          unsigned int temp, temp2, flag;
 137   1          unsigned int i;               // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `i`
 138   1          unsigned char j;              // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `j`
 139   1      
 140   1          temp = 0xFFFF;
 141   1      
 142   1          for (i = 0; i < length; i++) {
 143   2              temp = temp ^ buffer[i];
 144   2              for (j = 0; j < 8; j++) {
 145   3                  flag = temp & 0x0001;
 146   3                  temp >>= 1;
 147   3                  if (flag)
 148   3                      temp ^= 0xA001;
 149   3              }
 150   2          }
 151   1      
 152   1          // Reverse byte order.
 153   1          temp2 = temp >> 8;
 154   1          temp = (temp << 8) | temp2;
 155   1          temp &= 0xFFFF;
 156   1      
 157   1          return temp;
 158   1      }
 159          
 160          
 161            u8 parseModbusPacket(u8 *buffer, u16 length, ModbusPacket *parsedPacket) {
 162   1          u16 receivedCRC;
 163   1          u16 calculatedCRC; 
 164   1          unsigned int m;  
 165   1          unsigned int l;
 166   1          u16 receive_adr;
 167   1          u16 receive_cmd;
 168   1          receive_adr=  buffer[0];  
 169   1          receive_cmd=  buffer[1];  
 170   1          sys_write_vp(0x2065, &receive_adr, 1);
*** WARNING C182 IN LINE 170 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
 171   1          sys_write_vp(0x2067, &receive_cmd, 1);
*** WARNING C182 IN LINE 171 OF ..\HANDWARE\UART2\uart2.c: pointer to different objects
 172   1          
C51 COMPILER V9.53.0.0   UART2                                                             01/11/2025 09:38:15 PAGE 4   

 173   1          if (length < 4) {
 174   2              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞: –∞–¥—Ä–µ—Å (1 –±–∞–π—Ç) + —Ñ—É–Ω–∫—Ü–∏—è (1 –±–
             -∞–π—Ç) + CRC (2 –±–∞–π—Ç–∞)
 175   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 176   2              return 99 ;
 177   2          }
 178   1      
 179   1          // –ò–∑–≤–ª–µ–∫–∞–µ–º CRC –∏–∑ –∫–æ–Ω—Ü–∞ –ø–∞–∫–µ—Ç–∞
 180   1          
 181   1          receivedCRC = buffer[length - 1] | (buffer[length - 2] << 8);
 182   1      
 183   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 184   1          calculatedCRC = calculate_crc(buffer, length - 2);
 185   1          if (receivedCRC != calculatedCRC) {
 186   2             for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 187   2              return 98 ; // –û—à–∏–±–∫–∞ CRC
 188   2          }
 189   1      
 190   1          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞
 191   1          parsedPacket->rcv_address = buffer[0];
 192   1          parsedPacket->rcv_functionCode = buffer[1];
 193   1          parsedPacket->rcv_dataLength = buffer[2]; 
 194   1          for (m = 0; m < parsedPacket->rcv_dataLength; m++) {
 195   2              parsedPacket->rcv_data[m] = buffer[3 + m];
 196   2          }
 197   1           for(l=0; l<UART2_PACKET_MAX_LEN;l++) {buffer[l]=0;}
 198   1           return 1;
 199   1         
 200   1      }
 201          
 202          
 203          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1309    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     84      47
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
