C51 COMPILER V9.53.0.0   MAIN                                                              12/31/2024 13:34:33 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\OBJ\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE main.c LARGE OMF2 OPTIMIZE(3,SIZE) BROWSE INCDIR(..\USE
                    -R;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\main.lst) TABS(2) OBJECT(..\OBJ\main.obj)

line level    source

   1          #include "sys.h"
   2          #include "uart2.h"
   3          #include <string.h>
   4          extern  u8 modbus_addresses[5];     // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   5          extern  u16 start_reg;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   6          extern  u16 num_reg;                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   7          
   8          
   9          
  10          
  11          #define FIRST_TXT    "DGUS Tool\0\0"
  12          #define TEST_TXT     "DGUS TEST TEXT\0\0"
  13          #define INT_TXT    "INERRUPT \0\0"
  14          #define WHILE_TXT    "WHILE___ \0\0"
  15          
  16          
  17          
  18          // –ü—Ä–æ—Ç–æ—Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏
  19          void modbus_requests(ModbusRequest *requests);
  20          
  21          
  22          void modbus_requests(ModbusRequest *requests) {
  23   1          u8 packet[8];
  24   1          u16 crc;
  25   1      
  26   1          // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å Modbus
  27   1          packet[0] = requests->address;                      // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  28   1          packet[1] = requests->command;                                  // –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ (—á—Ç–µ–Ω–∏–µ
             - —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
  29   1          packet[2] = (requests->start_register >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä
             -–µ–≥–∏—Å—Ç—Ä–∞
  30   1          packet[3] = requests->start_register & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä
             -–µ–≥–∏—Å—Ç—Ä–∞
  31   1          packet[4] = (requests->num_registers >> 8) & 0xFF;  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä
             -–µ–≥–∏—Å—Ç—Ä–æ–≤
  32   1          packet[5] = requests->num_registers & 0xFF;         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä
             -–µ–≥–∏—Å—Ç—Ä–æ–≤
  33   1      
  34   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC
  35   1          crc = calculate_crc(packet, 6);
  36   1          packet[7] = crc & 0xFF;                            // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç CRC
  37   1          packet[6] = (crc >> 8) & 0xFF;                     // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç CRC
  38   1          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ UART
  39   1          u2_send_bytes(packet, 8);
  40   1      }
  41          
  42          
  43          
  44          
  45          void main(void)
  46          {   
  47   1      
  48   1      // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ `xdata`
  49   1      idata  ModbusRequest request[6] = {
C51 COMPILER V9.53.0.0   MAIN                                                              12/31/2024 13:34:33 PAGE 2   

  50   1          {0x1, 0x3, 0x0000, 0x2},   // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1
  51   1          {0x2, 0x3, 0x0008, 0x1},   // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2
  52   1          {0x3, 0x3, 0x0002, 0x2},   // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3
  53   1          {0x4, 0x3, 0x0020, 0x4},   // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 4
  54   1          {0x5, 0x3, 0x00FD, 0x1},  // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 5
  55   1          {0x6, 0x3, 0x002F, 0x1}   // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 6
  56   1      };
  57   1      
  58   1       idata  ModbusRequest temp_request;
  59   1        u8 send_buff[8]={0, };
  60   1        u32 polling_timer=0;                    // –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  61   1        u8 polling_state;                     // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: 0 - –æ—Ç–ø—Ä–∞–≤–∫–∞, 1 - –æ–∂–
             -∏–¥–∞–Ω–∏–µ
  62   1        u16 len;
  63   1        u16 i;
  64   1        u8 buff[64]={0, };
  65   1        u16 recv_len;
  66   1        idata u8 command_value; // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  67   1        float temperature;
  68   1        u16 rawValue;
  69   1       xdata ModbusPacket receivedPacket;
  70   1        
  71   1      u16 receive_cmd=0;
  72   1      xdata u16 receive_adr=0;
  73   1      
  74   1        sys_init();//System initialization
  75   1        
  76   1          
  77   1           sys_write_vp(0x2010,FIRST_TXT,sizeof(FIRST_TXT)/2+1);//
  78   1           sys_delay_ms(1000);
  79   1           sys_write_vp(0x2042,TEST_TXT,sizeof(TEST_TXT)/2+1);
  80   1           uart2_init(9600);//Initialize serial port 2
  81   1        
  82   1           modbus_requests(&request[0]);
  83   1           current_device = 0;
  84   1           polling_state=0;
  85   1        while(1){   
  86   2          
  87   2          
  88   2          if(uart2_rx_sta & UART2_PACKET_OK)
  89   2          {
  90   3            
  91   3          
  92   3            len = uart2_rx_sta&UART2_PACKET_LEN;
  93   3            
  94   3             receive_adr= uart2_buf[0]; 
  95   3             receive_cmd= uart2_buf[1]; 
  96   3            //memcpy(localBuffer, uart2_buf, len);
  97   3            sys_write_vp(0x2069, (u16*)&len, 2);
*** WARNING C182 IN LINE 97 OF main.c: pointer to different objects
  98   3            sys_write_vp(0x2065, (u16*)&receive_adr, 1);
*** WARNING C182 IN LINE 98 OF main.c: pointer to different objects
  99   3            sys_write_vp(0x2067, (u16*)&receive_cmd, 1);
*** WARNING C182 IN LINE 99 OF main.c: pointer to different objects
 100   3            recv_len = 0;
 101   3            for(i=0;i<len;i++)
 102   3            {
 103   4              recv_len += sprintf(buff+recv_len,"%02X ",(u16)uart2_buf[i]);
 104   4            }
 105   3          
 106   3            sys_write_vp(0x2010,buff,recv_len/2+1);
 107   3            
C51 COMPILER V9.53.0.0   MAIN                                                              12/31/2024 13:34:33 PAGE 3   

 108   3             if (parseModbusPacket(uart2_buf,len,(ModbusPacket*)&receivedPacket)==1) {   
 109   4                   sys_write_vp(0x2096, "OK    \n", 4);}
 110   3             else{ sys_write_vp(0x2096, "ERROR\n", 4); }
 111   3            
 112   3              uart2_rx_sta = 0;
 113   3            
 114   3          }
 115   2         
 116   2          
 117   2        
 118   2          
 119   2      if (polling_state==0) {
 120   3             if (current_device >= 5) {
 121   4                 current_device = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—
             -Ä–∞–Ω–∏—Ü—ã
 122   4                }
 123   3        
 124   3                
 125   3              
 126   3              temp_request = request[current_device];
 127   3              modbus_requests((ModbusRequest*)&temp_request);
 128   3                sys_write_vp(0x2000,(u8*)&current_device,1);
 129   3              
 130   3       
 131   3          command_value = temp_request.command; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
 132   3          sys_write_vp(0x2001, &temp_request.command, 1); // –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
*** WARNING C182 IN LINE 132 OF main.c: pointer to different objects
 133   3          sys_write_vp(0x2002, &temp_request.start_register, 1); // –ó–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
*** WARNING C182 IN LINE 133 OF main.c: pointer to different objects
 134   3          data_len=(temp_request.num_registers * 2)+5;  
 135   3          sys_write_vp(0x2003,(u16*)&data_len, 2);  
*** WARNING C182 IN LINE 135 OF main.c: pointer to different objects
 136   3          sys_write_vp(0x2004, &temp_request.address, 1);
*** WARNING C182 IN LINE 136 OF main.c: pointer to different objects
 137   3            polling_state=1;
 138   3            polling_timer=1300000; 
 139   3             }
 140   2            polling_timer--;
 141   2          
 142   2          
 143   2          // –°–æ—Å—Ç–æ—è–Ω–∏–µ 1: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
 144   2          if (polling_state == 1) {
 145   3              // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
 146   3            
 147   3              if (rcv_complete==1) {
 148   4                  sys_write_vp(0x2042, "Received        \n", 9);
 149   4                /*
 150   4                 if (parseModbusPacket(&uart2_buf,len,(ModbusPacket*)&receivedPacket)==1) {   
 151   4                   sys_write_vp(0x2096, "OK    \n", 4);
 152   4                    switch (receivedPacket.rcv_address) { 
 153   4                      
 154   4                     case 0x01: {
 155   4                   
 156   4                       switch (receivedPacket.rcv_functionCode) {
 157   4                     case 0x03: // –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 158   4                     { 
 159   4                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
 160   4                          if (receivedPacket.rcv_dataLength >= 2) {
 161   4                              // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
 162   4                              rawValue = (receivedPacket.rcv_data[0] << 8) | receivedPacket.rcv_data[1];
 163   4                              if (rawValue & 0x8000) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞–∫ —á–∏—Å–ª–∞
 164   4                                  rawValue = rawValue - 65536; // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
C51 COMPILER V9.53.0.0   MAIN                                                              12/31/2024 13:34:33 PAGE 4   

 165   4                              }
 166   4                             temperature = rawValue / 10.0; // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
 167   4                             sys_write_vp(0x2005,(u8*)&temperature,2);    
 168   4                             } else {
 169   4                            
 170   4                              }
 171   4                          //break;
 172   4                      }
 173   4                          break;
 174   4                   case 0x04: // –ß—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 175   4                    //  sys_write_vp(0x2008, receivedPacket.data, receivedPacket.dataLength);
 176   4                       break;
 177   4                   default:
 178   4                     // sys_write_vp(0x2009, "Unsupported Function\n", 21);
 179   4                      break;
 180   4                   }
 181   4                   
 182   4                   default:
 183   4                     
 184   4                      break;
 185   4                   
 186   4                 } 
 187   4                     break;
 188   4                  case 0xFF:  { }
 189   4                      break;
 190   4                  
 191   4                  
 192   4                  
 193   4               } 
 194   4                 }
 195   4                 else{ sys_write_vp(0x2096, "ERROR\n", 4); }
 196   4                
 197   4                */
 198   4                
 199   4                  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
 200   4                  current_device=current_device+1;
 201   4                  polling_state = 0;  // –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
 202   4                  rcv_complete=0;
 203   4                  polling_timer=10000;
 204   4              }
 205   3              // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
 206   3               if (polling_timer ==0) {
 207   4                  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 208   4                  sys_write_vp(0x2042, "Timeout         \n", 9);
 209   4      
 210   4                  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
 211   4                  current_device=current_device+1;
 212   4                  polling_state = 0;  // –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
 213   4                  rcv_complete=0;
 214   4              }     
 215   3          } 
 216   2        }
 217   1          
 218   1      }
*** WARNING C280 IN LINE 67 OF main.c: 'temperature': unreferenced local variable
*** WARNING C280 IN LINE 68 OF main.c: 'rawValue': unreferenced local variable
 219          
 220          
 221          
 222          


C51 COMPILER V9.53.0.0   MAIN                                                              12/31/2024 13:34:33 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1064    ----
   CONSTANT SIZE    =    206    ----
   XDATA SIZE       =   ----     144
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----      57
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  9 WARNING(S),  0 ERROR(S)
